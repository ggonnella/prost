#!/usr/bin/env python3
"""
Generate code for SqlAlchemy tables from data.

Usage:
  sql_models_from_data.py [options] <tsv>

Arguments:
  tsv:      tsv file (see below)

Required columns in input file:
  (1) table name
  (2) column name
  (3) value (JSON format)

Options:
  --verbose, -v  be verbose
  --version, -V  show script version
  --help, -h     show this help message
"""

from docopt import docopt
from schema import Schema, Use, And
import json
import textwrap

def emit_prelude(arguments):
  print(textwrap.dedent("""\
  #!/usr/bin/env python3
  \"\"\"
  This file was autogenerated, based on the content of file:"""))
  print(arguments["<tsv>"])
  print(textwrap.dedent("""\
  Do not edit manually, since any modification could be overwritten.
  \"\"\"

  from sqlalchemy.sql import func
  from sqlalchemy.ext.declarative import declarative_base
  from sqlalchemy import Column, Integer, String, Sequence, \\
                         DateTime, Text, Boolean, Float
  from sqlalchemy_repr import PrettyRepresentableBase

  Base = declarative_base(cls=PrettyRepresentableBase)

  utf8_cs_args = {'mysql_charset': 'utf8', 'mysql_collate': 'utf8_bin'}"""))

def parse_file(arguments):
  result = {}
  with open(arguments["<tsv>"]) as f:
    for line in f:
      line = line.rstrip()
      if line != "###":
        elems = line.split("\t")
        tablename = elems[0]
        colname = elems[1]
        json_data = json.loads(elems[2])
        if tablename not in result:
          result[tablename] = {colname: []}
        if colname not in result[tablename]:
          result[tablename][colname] = []
        result[tablename][colname].append(json_data)
  return result

def emit_tables_code(data, arguments):
  for tablename in data.keys():
    klassname = "".join(w.title() for w in tablename.split("_"))
    print("")
    print(f"class {klassname}(Base):")
    print(f"  __tablename__ = '{tablename}'")
    print(f"  id = Column(Integer, Sequence('{tablename}_id_seq'),"+
          " primary_key=True)")
    print("  time_updated = Column(DateTime,")
    print("    server_default=func.now(), onupdate=func.now())")
    for colname, coldata in data[tablename].items():
      if all(isinstance(v, bool) for v in coldata):
        print(f"  {colname} = Column(Boolean)")
      elif all(isinstance(v, int) for v in coldata):
        print(f"  {colname} = Column(Integer)")
      elif all(isinstance(v, float) for v in coldata):
        print(f"  {colname} = Column(Float)")
      else:
        lens = [len(str(v)) for v in coldata]
        maxlen = max(lens)
        if maxlen < 32:
          print(f"  {colname} = Column(String(64))")
        elif maxlen < 64:
          print(f"  {colname} = Column(String(128))")
        elif maxlen < 128:
          print(f"  {colname} = Column(String(256))")
        else:
          print(f"  {colname} = Column(Text({maxlen*2}))")
    print("  __table_args__ = utf8_cs_args")

def main(arguments):
  emit_prelude(arguments)
  data = parse_file(arguments)
  emit_tables_code(data, arguments)

def validated(arguments):
  schema = Schema({"<tsv>": open}, ignore_extra_keys=True)
  return schema.validate(arguments)

if __name__ == "__main__":
  arguments = docopt(__doc__, version="0.1")
  main(validated(arguments))
