#!/usr/bin/env python3

include: "common.snake"

#
# The replace_dead_socket is used to check that the socket (if it exists) allows
# a connection. If this is not the case (e.g. after a system restart without
# stopping the server), then the dead socket file is removed and the MySQL
# server is restarted.
#
# Since it checks if the socket file exists, and if the root password has
# already been set, nothing happens if the database had not been created and
# configured correctly.
#
# All rules which require the socket as input should not care about its
# timestamp, i.e. use input: socket=ancient(path.socket).
#
replace_dead_socket=\
      f"if test -S {path.socket}; then "+\
      f"  if test -e {path.db}/done.set_root_password; then"+\
      f"    if ! mysql -u root --password={config['dbrootpass']} "+\
      f"               -S {path.socket} -e';'; then "+\
      f"      rm {path.socket}; "+\
      f"      echo 'restarting DB server...';"+\
      f"      mysqld_safe --datadir={path.dbdata}"+\
      f"           --socket={path.socket}"+\
      f"           --user={config['sysuser']} &"+\
       "      sleep 1;"+\
       "    fi;"+\
       "  fi;"+\
       "fi"

onstart:
  shell(replace_dead_socket)

rule all:
  input:
    socket=path.socket

## Database initialization/creation

rule initialize:
  output:
    datadir=directory(path.dbdata)
  shell:
    """
    case "$(uname -s)" in
      Darwin*)
        echo "[PROSTDB] Using MacOS configuration..."
        echo "[PROSTDB] assuming mariadb is installed using brew"
        mysql_install_db --basedir="$(brew --prefix mariadb)" --user={config[sysuser]} --datadir={output.datadir}
        ;;
      *)
        echo "[PROSTDB] Using Linux/Unix configuration..."
        mysql_install_db --user={config[sysuser]} --datadir={output.datadir}
        ;;
      esac
    """

rule set_root_password:
  input:
    socket=ancient(path.socket),
    datadir=ancient(rules.initialize.output.datadir)
  output:
    done=touch(path.db/"done.set_root_password")
  shell:
    """
    case "$(uname -s)" in
      Darwin*)
        echo -n "[PROSTDB] On MacOS, setting the DB root password currently "
        echo "requires root access to the system"
        echo "[PROSTDB] Enter the root password at the following prompt"
        COMMANDS="USE mysql; "
        COMMANDS+="ALTER USER 'root'@'localhost' "
        COMMANDS+="  IDENTIFIED BY '{config[dbrootpass]}';"
        COMMANDS+="FLUSH PRIVILEGES; "
        echo ${{COMMANDS}}
        echo "${{COMMANDS}}" | sudo mysql -u root \
                           --socket={input.socket}
        ;;
      *)
        echo "[PROSTDB] Using mysqladmin to change the DB root password"
        mysqladmin -u root --socket={input.socket} password {config[dbrootpass]}
        ;;
      esac
    """

rule create_db:
  input:
    ancient(rules.set_root_password.output.done),
    socket=ancient(path.socket)
  output:
    done=touch(path.db/"done.create_db")
  shell:
    """
    COMMANDS="CREATE DATABASE \`{config[dbname]}\`; "
    COMMANDS+="CREATE DATABASE \`{config[testdbname]}\`; "
    echo ${{COMMANDS}}
    echo "${{COMMANDS}}" | mysql -u root \
                           --password={config[dbrootpass]} \
                           --socket={input.socket}
    """

rule create_dbuser:
  input:
    ancient(rules.create_db.output.done),
    socket=ancient(path.socket)
  output:
    done=touch(path.db/"done.create_db_user")
  shell:
    """
    COMMANDS="CREATE USER '{config[dbuser]}' IDENTIFIED BY '{config[dbpass]}'; "
    COMMANDS+="GRANT USAGE ON *.* TO '{config[dbuser]}'@localhost "
    COMMANDS+="  IDENTIFIED BY '{config[dbpass]}'; "
    COMMANDS+="GRANT ALL PRIVILEGES ON \`{config[dbname]}\`.* TO"
    COMMANDS+="  '{config[dbuser]}'@localhost; "
    COMMANDS+="GRANT ALL PRIVILEGES ON \`{config[testdbname]}\`.* TO"
    COMMANDS+="  '{config[dbuser]}'@localhost; "
    COMMANDS+="FLUSH PRIVILEGES;"
    echo ${{COMMANDS}}
    echo "${{COMMANDS}}" | mysql -u root \
                           --password={config[dbrootpass]} \
                           --socket={input.socket}
    """

## Database administration tasks

rule start_server:
  input:
    datadir=path.dbdata
  output:
    socket=path.socket
  shell:
    """
    mysqld_safe --datadir={input.datadir} \
                --socket={output.socket} \
                --user={config[sysuser]} &
    """

rule stop_server:
  input:
    ancient(rules.set_root_password.output.done),
    socket=ancient(path.socket)
  shell:
    """
    mysqladmin -u root --password={config[dbrootpass]} \
                       --socket={input.socket} shutdown
    """

rule show_processes:
  input:
    ancient(rules.set_root_password.output.done),
    socket=ancient(rules.start_server.output.socket)
  shell:
    """
    mysqladmin processlist -u root \
        --password={config[dbrootpass]} \
        --socket={input.socket}
    """

rule connect:
  input:
    ancient(rules.create_dbuser.output.done),
    socket=ancient(rules.start_server.output.socket)
  shell:
    """
    mysql --socket={input.socket} \
          --database={config[dbname]} \
          -u {config[dbuser]} \
          --password={config[dbpass]}
    """

rule tconnect:
  input:
    ancient(rules.create_dbuser.output.done),
    socket=ancient(rules.start_server.output.socket)
  shell:
    """
    mysql --socket={input.socket} \
          --database={config[testdbname]} \
          -u {config[dbuser]} \
          --password={config[dbpass]}
    """

rule root_connect:
  input:
    ancient(rules.set_root_password.output.done),
    socket=ancient(rules.start_server.output.socket)
  shell:
    """
    mysql --socket={input.socket} --database={config[dbname]} \
          -u root --password={config[dbrootpass]}
    """

#
# Used to create a fake socket to test the replace_dead_socket
# functionality (see onstart hook). Use after a stop_server,
# otherwise it will fail. If everything works as intended, the
# fake socket will be removed and replaced the next time the
# workflow is executed.
#
rule fake_socket:
  run:
    import socket
    sock = socket.socket(socket.AF_UNIX)
    sock.bind(str(path.socket))
