#!/usr/bin/env python3

include: "common.snake"

# The following mechanism is used to allow updating a file, if necessary:
#
# update_taxdump is called, because all requires "taxdump.updated";
# it requires the output of "prepare_update", where the taxdump file is renamed
# (prepending current_) or an empty file is created; if "current_" is empty
# update_taxdump just downloads the file, otherwise it checks the timestamp
# (curl -z) and downloads only if newer.
#
# since update_taxdump is a checkpoint, after it is run, the DAG is recomputed.
# "nodes.dmp" is still required by all, which is made, if there is now a new
# taxdump file; otherwise the old one is kept.
#
# just requiring nodes.dmp would not work, since the file already exists
# therefore there is a flag file (taxdump.updated) which is temporary and
# deleted after all is run; this forces re-runnig update_taxdump every time
#
# it would not work to use the same file as input and output, because, without
# force flag or a flag file, nothing would be done (as the file already exists)
# and with a force flag or a flag file, the output would be removed before
# running the rule, thus re-downloaded every time.

rule all:
  input:
    path.tax/"taxdump.updated",
    path.tax/"nodes.dmp"

rule prepare_update:
  params:
    possible_input=path.tax/"taxdump.tar.gz"
  output:
    taxdump=path.tax/"current_taxdump.tar.gz"
  shell:
    """
    if [ -e {params.possible_input} ]; then
      mv {params.possible_input} {output.taxdump}
    else
      touch {output.taxdump}
    fi
    """

checkpoint update_taxdump:
  input:
    taxdump=rules.prepare_update.output.taxdump
  output:
    done=temp(touch(path.tax/"taxdump.updated")),
    taxdump=path.tax/"taxdump.tar.gz"
  params:
    remote="ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz"
  shell:
    """
    if [ -s {input.taxdump} ]; then
      curl -o {output.taxdump} -z {input.taxdump} {params.remote}
    else
      rm {input.taxdump}
      curl -o {output.taxdump} {params.remote}
    fi
    if [ ! -e {output.taxdump} ]; then
      mv {input.taxdump} {output.taxdump}
    fi
    """

rule decompress_taxdump:
  input:
    taxdump=rules.update_taxdump.output.taxdump
  output:
    expand(path.tax/"{table}.dmp",
        table=["names", "nodes", "gencode", "division",
               "merged", "delnodes", "citations"])
  shell:
    """
    tar xvf {input.taxdump} -C {path.tax}
    """
