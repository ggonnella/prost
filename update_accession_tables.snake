#/usr/bin/env python3
from glob import glob
import os
import shutil
import re

DBs = ["refseq", "genbank"]
Domains = ["bacteria", "archaea"]

genomesdir=os.environ["HOME"]+"/data/prok_complete_genomes/"
asmsummarydir=genomesdir+"asmsummary/"

rule table_asm_accessions:
  input:
    asmsummarydir+"assembly_summary_refseq_{domain}.txt"
  output:
    asmsummarydir+"accessions/rsasm.{domain}.tsv",
    asmsummarydir+"accessions/gbasm_rsasm.{domain}.tsv"
  run:
    r_tsv = open(output[0], "w")
    g_tsv = open(output[1], "w")
    with open(input[0]) as f:
      for line in f:
        if line[0] != "#":
          elems = line.rstrip().split("\t")
          if elems[10] == "latest" and elems[11] == "Complete Genome":
            r_tsv.write(elems[0]+"\n")
            # gbasmacc asmacc
            g_tsv.write(elems[17]+"\t"+elems[0]+"\n")
    r_tsv.close()
    g_tsv.close()

rule genbank_download_paths:
  input:
    asmsummarydir+"accessions/gbasm_rsasm.{domain}.tsv",
    asmsummarydir+"assembly_summary_refseq_{domain}.txt"
  output:
    asmsummarydir+"accessions/plan/genbank_{domain}.remote_path.tsv"
  run:
    gbasms = set()
    outfile = open(output[0], "w")
    with open(input[0]) as f:
      for line in f:
        elems = line.rstrip().split("\t")
        gbasms.add(elems[0])
    with open(input[1]) as f:
      for line in f:
        if line[0] != "#":
          elems = line.rstrip().split("\t")
          if elems[17] in gbasms:
            rsasm = elems[0]
            rspath = elems[19]
            gbasm = elems[17]
            rsdirparts = rspath.split("/")[-1].split("_")
            gbdir = gbasm + "_" + "_".join(rsdirparts[2:])
            gbpath = "/".join(["ftp://ftp.ncbi.nlm.nih.gov",
                     "genomes", "all", "GCA", gbasm[4:7], gbasm[7:10],
                      gbasm[10:13], gbdir])
            outfile.write("\t".join([rsasm, gbasm, gbpath])+"\n")
            gbasms.remove(gbasm)
    outfile.close()

rule cp_existing_genbank_seqacc:
  params:
    possible_input=asmsummarydir+"accessions/gbasm_rsasm_gbseq.{domain}.tsv"
  output:
    asmsummarydir+"accessions/plan/gbasm_rsasm_gbseq.{domain}.tsv"
  shell:
    """
    if [ -e {params.possible_input} ]; then
      cp {params.possible_input} {output}
    else
      touch {output}
    fi
    """

rule list_needed_genbank_seqacc:
  input:
    asmsummarydir+"accessions/plan/genbank_{domain}.remote_path.tsv",
    asmsummarydir+"accessions/plan/gbasm_rsasm_gbseq.{domain}.tsv"
  output:
    asmsummarydir+"accessions/plan/genbank_{domain}.need_seqacc"
  run:
    not_needed = set()
    with open(input[1]) as f:
      for line in f:
        elems = line.rstrip().split("\t")
        not_needed.add(elems[0])
    outfile = open(output[0], "w")
    with open(input[0]) as f:
      for line in f:
        elems = line.rstrip().split("\t")
        if elems[1] not in not_needed:
          outfile.write(line)
    outfile.close()

rule update_gbseq_list:
  input:
    asmsummarydir+"accessions/plan/genbank_{domain}.need_seqacc",
    asmsummarydir+"accessions/plan/gbasm_rsasm_gbseq.{domain}.tsv"
  output:
    asmsummarydir+"accessions/gbasm_rsasm_gbseq.{domain}.tsv"
  run:
    outfile = open(output[0], "w")
    with open(input[0]) as f:
      for line in f:
        elems = line.rstrip().split("\t")
        fpath = elems[2]
        fn = elems[2].split("/")[-1] + "_genomic.fna.gz"
        accfn = elems[1] + ".acc"
        shell(f"wget {fpath}/{fn} -O {fn}")
        shell(f"zcat {fn} | grep -P '^>' | cut -f1 -d' ' | cut -c2- > {accfn}")
        seqaccs = []
        with open(accfn) as f2:
          for l2 in f2:
            seqaccs.append(l2.rstrip())
        outfile.write("\t".join([elems[1], elems[0], ",".join(seqaccs)])+"\n")
        outfile.flush()
        os.remove(fn)
        os.remove(accfn)
    with open(input[1]) as f:
      for line in f:
        outfile.write(line)
    outfile.close()

rule cp_existing_refseq_seqacc:
  params:
    possible_input=asmsummarydir+"accessions/rsasm_rsseq.{domain}.tsv"
  output:
    asmsummarydir+"accessions/plan/rsasm_rsseq.{domain}.tsv"
  shell:
    """
    if [ -e {params.possible_input} ]; then
      cp {params.possible_input} {output}
    else
      touch {output}
    fi
    """

rule list_needed_refseq_seqacc:
  input:
    asmsummarydir+"accessions/plan/rsasm_rsseq.{domain}.tsv"
  output:
    asmsummarydir+"accessions/plan/refseq_{domain}.need_seqacc"
  run:
    not_needed = set()
    with open(input[0]) as f:
      for line in f:
        elems = line.rstrip().split("\t")
        not_needed.add(elems[0])
    outfile = open(output[0], "w")
    files = glob(genomesdir+f"seq/{wildcards.domain}/chunk.*/*_genomic.fna.gz")
    for fn in files:
      asmacc = "_".join(os.path.basename(fn).split("_")[:2])
      if asmacc not in not_needed:
        outfile.write(f"{asmacc}\t{fn}\n")
    outfile.close()

rule update_rsseq_list:
  input:
    asmsummarydir+"accessions/plan/refseq_{domain}.need_seqacc",
    asmsummarydir+"accessions/plan/rsasm_rsseq.{domain}.tsv"
  output:
    asmsummarydir+"accessions/rsasm_rsseq.{domain}.tsv"
  run:
    outfile = open(output[0], "w")
    with open(input[0]) as f:
      for line in f:
        elems = line.rstrip().split("\t")
        accfn = elems[0] + ".acc"
        fn = elems[1]
        shell(f"zcat {fn} | grep -P '^>' | cut -f1 -d' ' | cut -c2- > {accfn}")
        seqaccs = []
        with open(accfn) as f2:
          for l2 in f2:
            seqaccs.append(l2.rstrip())
        outfile.write("\t".join([elems[0], ",".join(seqaccs)])+"\n")
        outfile.flush()
        os.remove(accfn)
    with open(input[1]) as f:
      for line in f:
        outfile.write(line)
    outfile.close()
