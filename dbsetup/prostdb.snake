include: srcdir("../snakes/read_config.snake")

import getpass
sysuser = getpass.getuser()

from pathlib import Path

help_dbpath = "The 'dbpath' configuration variable must contain the path to "+\
             "the database data directory."
help_dbrootpass = "The 'dbrootpass' configuration variable must contain the "+\
             "password of the database administrator account "+\
             f"'{sysuser}'."

check_config_var(config, "dbpath", help_dbpath)
check_config_var(config, "dbrootpass", help_dbrootpass)

help_rules = """\
Select one of the following rules by passing the rule name as an argument
to the snakemake command line.

  initialize:  initialize the database data directory and setup the password
               for the database administrator account ('{sysuser}')
  create:      create the database and a database user account

  start:       start the database server
  stop:        stop the database server
  ps:          show running server processes
  connect:     start interactive database shell

Developer rules:

  create_test: create the test database
  tconnect:    start interactive database shell using test database
  rconnect:    start interactive database shell using administrator account

  fake_socket:  create a fake socket file for the replace_test
                (run 'stop' rule first!)
  replace_test: test the replacement of unusable sockets
                (run 'fake_socket' rule first!)

Please refer to the documentation for further information.
""".format(sysuser=sysuser)

include: srcdir("replace_dead_socket.snake")

rule all:
  run:
    print(help_rules)

## Database initialization/creation

rule initialize:
  params:
    srcdir=srcdir(".")
  shell:
    """
    {params.srcdir}/install_database.sh {config[dbpath]} {config[dbrootpass]}
    """

rule create:
  params:
    srcdir=srcdir(".")
  output:
    dbdir=directory(Path(config["dbpath"])/config["dbname"])
  shell:
    """
    {params.srcdir}/create_database.sh {config[dbpath]} {config[dbrootpass]} \
                         {config[dbname]} {config[dbuser]} \
                         {config[dbpass]}
    """

rule create_test:
  params:
    srcdir=srcdir(".")
  output:
    dbdir=directory(Path(config["dbpath"])/config["testdbname"])
  shell:
    """
    {params.srcdir}/create_database.sh {config[dbpath]} {config[dbrootpass]} \
                         {config[testdbname]} {config[dbuser]} \
                         {config[dbpass]}
    """

## Database administration tasks

rule start:
  params:
    srcdir=srcdir(".")
  output:
    socket=config["dbsocket"]
  shell:
    """
    {params.srcdir}/start_database_server.sh {config[dbpath]} {config[dbhost]} \
                               {config[dbport]} {output.socket} \
                               {config[dbname]} {config[dbuser]} \
                               {config[dbpass]}
    """

rule stop:
  shell:
    """
    if [ -S {config[dbsocket]} ]; then
      mysqladmin -u {sysuser} --password={config[dbrootpass]} \
                  --socket={config[dbsocket]} shutdown
      echo 'Server was stopped.'
    else
      echo 'Server was not running (no socket file).'
    fi
    """

rule ps:
  input:
    socket=ancient(rules.start.output.socket)
  shell:
    """
    mysqladmin processlist -u {sysuser} \
        --password={config[dbrootpass]} \
        --socket={input.socket}
    """

rule connect:
  input:
    socket=ancient(rules.start.output.socket)
  shell:
    """
    mysql --socket={input.socket} \
          --database={config[dbname]} \
          -u {config[dbuser]} \
          --password={config[dbpass]}
    """

rule tconnect:
  input:
    socket=ancient(rules.start.output.socket)
  shell:
    """
    mysql --socket={input.socket} \
          --database={config[testdbname]} \
          -u {config[dbuser]} \
          --password={config[dbpass]}
    """

rule rconnect:
  input:
    socket=ancient(rules.start.output.socket)
  shell:
    """
    mysql --socket={input.socket} --database={config[dbname]} \
          -u {sysuser} --password={config[dbrootpass]}
    """
